
Write-up for PA5
----------------
modified files: cgen.cc, cgen.h, cool-tree.h, cool-tree.handcode.h


In this assignment, we implement two general phases, first phase goes through class structure to build inheritance tree, string, int, bool constants, class name table and class tag table. The second phase goes through each class again to build init method for each class to initialize class' attributes and then recursively generate code for each expression.

Each phase includes multiple smaller phases with general skeleton like below:

code_global_data(): generate general global data

code_select_gc(): generate information about garbage collector

code_constants(): generate int, string and bool constants

code_class_name_table(): generate class name and class object table. Class object table is used when encountering new SELF_TYPE in which we want to refer to class initialization and class prototype from class tag. The order of classes in this table reflect its class tag value.

code_class_dispatch_table(): generate dispatch table for each class, each function in a class is referred by a unique offset int the dispatch table.

code_class_layout(): generate prototype layout for each class, we reuse class tag value generated from previous phases, since children class inherits attributes from parent classes, we need to put attributes of highest parent class first then children of that parent then so on so that offset of an attribute is the same for both parent and children. At this phase, all attributes are initialized with default value or void and will be updated to correct initialize value at later phase.

code_global_text(): init heap code

code_object_init(): generate initialization code for each object. Since at the layout phase assigns default values for attributes, in this phase we generally go through initialization code for each attributes, copy object and assign address of newly created object to that attribute.

code_class_methods(): this is the heart of the generator, it recursively goes through each expression and generate code for each of them. One important point is to keep the invariant in which S0 points to self, ACC points to most current result of an expression, FP points to the beginning of variables of current scope which can be used to refer to any variable. Common information is passed among expression via a CgenClassTable pointer.

We ignore the performance aspect in this implementation so our code includes many algorithm which run in O(n^2) or O(n^3). Also, we do not optimize the use of temporary registers in this application, instead we use stack storage to store variables in most of the case which is bad in real world application since registers are much faster.

Garbage collection:
We support garbage collection simply by loading the new updated attributes of into A1 and call _GenGC_Assign.

Testing:
We have two general scenarios for testing:

Atomically testing: We divide test into multiple cases, each case for each operational semantic and expected runtime errors.

Batch testing: we reuse test cases written for assignment 1 to test the operational semantic of our generator in a relatively complicated cool program.

Our test code include automatic script test.sh and stacktest.sh to test two different scenarios as mentioned above. test/testcases includes tests for test.sh and test/stacktest/testcases includes tests for stacktest.sh

Some notes:

- We use some global variables like labelIdx and make some attributes of class CgenClassTable public intentionally to accelerate the development speed with full awareness of the evil of this way of development
