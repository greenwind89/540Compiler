Minh Truong
Hung Phan
Write-up for PA2
----------------

In this assignment, we only modify cool.flex file so all of our code is contained in that file. Since we do not use yywrap and we use stack to handle nested comment, we turn off yywrap by option "%option noyywrap" and turn on stack by using "%option stack".

The most challenging aspect of building the lexer is to handle nested comments and string. Since both string andc comment behaves completely differently from normal context, we use start condition "comment" and "string" to handle both case. To handle nested comment, we use stack to pop "comment" condition into the stack when encountering "(*" and pop it out when encoutering "*)". The INITIAL condition is always pushed into stack upon encountering the first comment so when we meet the final "*)", we pop INITAL out and everything works as normal context again.

We wrote the test with a <- "afd \0" and a <- \0 and the lexer provided by instructors returning STR_CONST "afd 0" for the former and ERROR for the latter case, so I guess we will not throw ERROR when encountering null character but repalce it by "0" instead and I implemented my lexer in that way.

In case of "<", even though we noticed that there is token type LE in cool-parse.h, we tested on the provided lexer and it produces "<" instead of "LE", so we do not use LE in our program instead, we treat "<" as normal special notation

There may be many exceptions on a string constant, we choose to report the first exception and resume lexing at the end of string (defined in assignment)


Test strategy

In the test, we will not concern about the syntax but our first priority is to make sure that all tokens, exceptional and nested cases are covered, so the test in test.cl will yield syntax error when compiling with parser but give identical result with lexer provided by instructors.

Since we use "diff" in linux to automatically match our test with results our provided lexer, we will focus only on increasing the coverage.

In case of EOF in string and comment, since we can only cover one case per test file, we choose to go with comment to reuse code provided by instructors

Our tests are arranged in the following order
+ Keywords
+ Whitespace
+ Special notations
+ Multiple character operators
+ Comment and nested comment
+ String constants
+ Integer constants
+ Exceptions with string Constant
  - Unterminated string constants
  - Long string constant
  - Long string containing nonterminated
  - Long string containing valid new line 
  - Long string span on multiple lines
+ Exception with comment
  - Unmatched close
+ Exception with invalid characters
+ Test code originally provided by instructors

The final block of code is the code provided by instructor
